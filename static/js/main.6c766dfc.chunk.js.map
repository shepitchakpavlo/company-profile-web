{"version":3,"sources":["components/Image.js","components/View.js","components/Text.js","components/NewsSection/NewsItem.js","getNews.js","components/NewsSection/useNews.js","components/NewsSection/NewsSection.js","components/CompanyProfile.js","components/TabBar.js","App.js","serviceWorker.js","index.js"],"names":["styled","img","div","NewsItem","item","className","dateToDisplay","Date","publishedAt","toLocaleString","RootView","ThumbnailImage","src","urlToImage","ColumnView","Link","href","url","target","title","RowView","AuthorText","author","DateText","View","Image","a","Text","company","fetch","mode","response","json","body","articles","useNews","companyName","React","useState","news","setNews","isLoading","setIsLoading","isError","setIsError","useEffect","getNews","result","loadNews","NewsSection","HeaderText","ErrorText","LoaderText","length","map","NewsItemStyled","key","NoNewsText","propTypes","PropTypes","string","isRequired","CompanyProfile","profile","logo","name","description","Logo","BodyText","TabBar","items","onSelect","selected","id","TabItem","isSelected","onClick","props","companyList","Object","values","companiesData","App","selectedCompany","setSelectedCompany","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c766dfc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.img``\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  box-sizing: border-box;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  \n`\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Image from '../Image';\nimport View from '../View';\nimport Text from '../Text';\n\nconst NewsItem = ({ item, className }) => {\n  const dateToDisplay = new Date(item.publishedAt).toLocaleString();\n\n  return (\n    <RootView className={className}>\n      <ThumbnailImage src={item.urlToImage} />\n      <ColumnView>\n        <Link href={item.url} target=\"_blank\">\n          {item.title}\n        </Link>\n        <RowView>\n          <AuthorText>{item.author}</AuthorText>\n          <DateText>{dateToDisplay}</DateText>\n        </RowView>\n      </ColumnView>\n    </RootView>\n  );\n};\n\nexport default NewsItem;\n\nconst ST = PropTypes.string.isRequired;\n\nNewsItem.propTypes = {\n  item: PropTypes.shape({\n    title: ST,\n    author: PropTypes.string,\n    url: ST,\n    urlToImage: ST,\n    publishedAt: ST,\n  }),\n  className: PropTypes.string,\n};\n\nconst RootView = styled(View)`\n  flex-direction: row;\n  align-items: center;\n  border: 1px solid black;\n  padding: 12px;\n`;\n\nconst ThumbnailImage = styled(Image)`\n  width: 85px;\n  object-fit: contain;\n  margin-right: 12px;\n`;\n\nconst RowView = styled(View)`\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst ColumnView = styled(View)`\n  flex-direction: column;\n`;\n\nconst Link = styled.a`\n  font-size: 12px;\n  margin-bottom: 5px;\n`;\n\nconst AuthorText = styled(Text)`\n  font-size: 10px;\n  font-style: italic;\n`;\n\nconst DateText = styled(Text)`\n  font-size: 10px;\n  font-style: oblique;\n`;\n","const apiKey = '1ce4d2efa1394b6091e5773abb201d85';\n\nconst getUrl = q =>\n  `http://newsapi.org/v2/top-headlines?q=${q}&sortBy=publishedAt&apiKey=${apiKey}`;\n\nexport default async company => {\n  const url = getUrl(company);\n  const response = await fetch(url, { mode: 'no-cors' });\n  const body = await response.json();\n\n  return body.articles;\n};\n","import React from 'react';\nimport getNews from '../../getNews';\n\nconst useNews = companyName => {\n  const [news, setNews] = React.useState(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    const loadNews = async () => {\n      setNews(null);\n      setIsLoading(true);\n      try {\n        const result = await getNews(companyName);\n        setNews(result);\n        setIsLoading(false);\n      } catch (e) {\n        setIsError(true);\n      }\n      setIsLoading(false);\n    };\n\n    loadNews();\n  }, [companyName]);\n\n  return { news, isLoading, isError };\n};\n\nexport default useNews;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'styled-components';\nimport View from '../View';\nimport Text from '../Text';\nimport NewsItem from './NewsItem';\nimport useNews from './useNews';\n\nconst NewsSection = ({ companyName, className }) => {\n  const { news, isLoading, isError } = useNews(companyName);\n  const renderContent = () => {\n    if (isError) {\n      return <ErrorText>Loading error</ErrorText>;\n    }\n    if (isLoading) {\n      return <LoaderText>Loading...</LoaderText>;\n    }\n    if (!news || news.length === 0) {\n      return <NoNewsText>No news for this company</NoNewsText>;\n    }\n\n    return news.map(item => <NewsItemStyled item={item} key={item.url} />);\n  };\n\n  return (\n    <RootView className={className}>\n      <HeaderText>News</HeaderText>\n      {renderContent()}\n    </RootView>\n  );\n};\n\nexport default NewsSection;\n\nNewsItem.propTypes = {\n  className: PropTypes.string,\n  companyName: PropTypes.string.isRequired,\n};\n\nconst RootView = styled(View)`\n  flex-direction: column;\n  border: 1px solid #ccc;\n  padding: 12px;\n`;\n\nconst ErrorText = styled(Text)`\n  color: red;\n`;\n\nconst LoaderText = styled(Text)`\n  color: green;\n`;\n\nconst NoNewsText = styled(Text)`\n  color: blue;\n`;\n\nconst HeaderText = styled(Text)`\n  font-size: 16px;\n  text-decoration: underline;\n`;\n\nconst NewsItemStyled = styled(NewsItem)`\n  margin-top: 12px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Image from './Image';\nimport NewsSection from './NewsSection';\nimport View from './View';\nimport Text from './Text';\n\nconst CompanyProfile = ({ profile, className }) => {\n  const { logo, name, description } = profile;\n\n  return (\n    <RootView className={className}>\n      <Logo src={logo} />\n      <HeaderText>{name}</HeaderText>\n      <BodyText>{description}</BodyText>\n      <NewsSection companyName={name}/>\n    </RootView>\n  );\n};\n\nexport default CompanyProfile;\n\nCompanyProfile.propTypes = {\n  profile: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    logo: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n  }).isRequired,\n  className: PropTypes.string,\n};\n\nconst RootView = styled(View)`\n  flex: 1;\n  flex-direction: column;\n  align-items: stretch;\n  max-width: 400px;\n  padding: 12px;\n`;\n\nconst HeaderText = styled(Text)`\n  font-weight: bold;\n  font-size: 22px;\n  margin: 12px 0;\n`;\n\nconst BodyText = styled(Text)`\n  margin-bottom: 12px;\n`;\n\nconst Logo = styled(Image)`\n  width: 100%;\n  height: 100px;\n  object-fit: contain;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Text from './Text';\nimport View from './View';\n\nconst TabBar = ({ items, onSelect, selected }) => {\n  const renderItem = ({ name, id }) => (\n    <TabItem isSelected={selected === id} onClick={() => onSelect(id)} key={id}>\n      {name}\n    </TabItem>\n  );\n\n  return <RootView>{items.map(renderItem)}</RootView>;\n};\n\nexport default TabBar;\n\nTabBar.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  onSelect: PropTypes.func.isRequired,\n  selected: PropTypes.string.isRequired,\n};\n\nconst RootView = styled(View)`\n  height: 50px;\n  align-self: stretch;\n`;\n\nconst decideBackgroundColor = props => (props.isSelected ? '#ccc' : '#f1f1f1');\n\nconst TabItem = styled(Text)`\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  padding: 5px;\n  border: 1px solid #ccc;\n  background-color: ${decideBackgroundColor};\n  &:hover {\n    background-color: #ddd;\n  }\n`;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { CompanyProfile, TabBar, View } from './components';\nimport companiesData from './companies';\n\nconst companyList = Object.values(companiesData);\n\nfunction App() {\n  const [selectedCompany, setSelectedCompany] = useState(companyList[0].id);\n\n  return (\n    <RootView>\n      <TabBar\n        items={companyList}\n        onSelect={setSelectedCompany}\n        selected={selectedCompany}\n      />\n      <CompanyProfile profile={companyList[selectedCompany]} />\n    </RootView>\n  );\n}\n\nexport default App;\n\nconst RootView = styled(View)`\n  flex: 1;\n  flex-direction: column;\n  align-items: center;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}